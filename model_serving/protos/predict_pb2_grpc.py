# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import predict_pb2 as predict__pb2


class ModelServingStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.predict = channel.unary_unary(
        '/model_serving.ModelServing/predict',
        request_serializer=predict__pb2.ModelInput.SerializeToString,
        response_deserializer=predict__pb2.ModelOutput.FromString,
        )
    self.reset = channel.unary_unary(
        '/model_serving.ModelServing/reset',
        request_serializer=predict__pb2.Empty.SerializeToString,
        response_deserializer=predict__pb2.Empty.FromString,
        )


class ModelServingServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def predict(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def reset(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ModelServingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'predict': grpc.unary_unary_rpc_method_handler(
          servicer.predict,
          request_deserializer=predict__pb2.ModelInput.FromString,
          response_serializer=predict__pb2.ModelOutput.SerializeToString,
      ),
      'reset': grpc.unary_unary_rpc_method_handler(
          servicer.reset,
          request_deserializer=predict__pb2.Empty.FromString,
          response_serializer=predict__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'model_serving.ModelServing', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
